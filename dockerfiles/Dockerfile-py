# Use an official Node.js runtime as the base image
FROM python:3.12.3-slim as build

# Set the working directory in the container to /app
WORKDIR /python

# Copy package.json and package-lock.json into the working directory
COPY ./backend/worker/requirements.txt ./

# Install the app dependencies inside the docker image
RUN pip install --no-cache-dir -r requirements.txt


# Define the command to run your app using CMD which defines your runtime
COPY ./backend/worker .

EXPOSE 3002

CMD ["uvicorn", "worker:app", "--host", "0.0.0.0", "--port", "3002"]

# # Use the official Python slim image as the base image
# FROM python:3.12.3-alpine as build

# # Install build dependencies
# RUN apk add --no-cache gcc musl-dev libffi-dev

# # Set the working directory in the container
# WORKDIR /app

# # Copy the requirements file into the container
# COPY ./backend/worker/requirements.txt ./

# # Install the app dependencies
# RUN pip install --no-cache-dir -r requirements.txt

# # Copy the rest of the application into the container
# COPY ./backend/worker .

# # Use the official Python runtime as a minimal base image
# FROM python:3.12.3-alpine

# # Set the working directory in the container
# WORKDIR /app

# # Copy the dependencies and application code from the build stage
# COPY --from=build /usr/local/lib/python3.12/site-packages /usr/local/lib/python3.12/site-packages
# COPY --from=build /app /app

# # Expose the port your app runs on
# EXPOSE 3002

# # Define the command to run your app
# CMD ["uvicorn", "worker:app", "--host", "0.0.0.0", "--port", "3002"]